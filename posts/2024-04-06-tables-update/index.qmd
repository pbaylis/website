---
title: "Making LaTeX tables that look nice (2024 update)"
description: ""
author: "Patrick Baylis"
date: 2024-04-06
format: 
  html:
    page-layout: full
categories:
  - R
  - latex
---

I haven't been very good at updating the blog recently,^[An understatement. I've been very bad at updating it.] but it feels like as good a time as any for an update on how to make basic but nice-looking LaTeX tables with relatively little coding effort. This post is an update to this [post from 2021](/posts/2021-05-30-making-tables/2021-05-30-making-tables.qmd), which was itself an update to a [post from 2019](/posts/2019-11-25-r-reg-tables/2019-11-25-r-reg-tables.qmd). I'll leave the discussion of philosophies around table-making to the 2021 post and get right to the good stuff: we're going to make these two tables.

![](summary-preview.png){width=49%} ![](reg-preview.png){width=49%}

If you don't like the way those look, now is a good time to bail.

## Setup

### Load stuff

First, we gotta load some stuff. I'm going to use [`pacman`](https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html) for package management, the [`tidyverse`](https://www.tidyverse.org/) for general data manipulation, `AER` for some data on automobile fatatalies, [`modelsummary`](https://modelsummary.com/) for summary statistics, [`kableExtra`](https://bookdown.org/yihui/rmarkdown-cookbook/kableextra.html) for some extra table formatting, and the inimitable [`fixest`](https://lrberge.github.io/fixest/) for estimating regressions and making the regression tables. 

::: {.callout-note}
We owe these package authors a huge thank-you for making our lives easier. **If you use them, don't forget to cite them in your papers and buy them a beverage of their choice when you meet them in person!** 

(Mea culpa: I have not done a good job citing the many packages I use in my own work. I will do better.)
:::

```{r setup}
pacman::p_load(tidyverse, AER, modelsummary, kableExtra, fixest)

data("Fatalities")
```



### Rescale and relabel variables

Next we need to do some cleaning up. I find it's useful to have my variables on similar scales for regressions and I want to make sure I'm describing those variables accurately, so before I do anythign I rescale and rename variable appropriately. This is also a good time to define a data dictionary here to clean up names in tables later.

```{r rename-and-rescale}
## Rescale and label variables
data <- Fatalities %>%
  transmute(state, year, 
    unemprate = unemp,
    beertax = beertax * 100,
    income1000s = income / 1000,
    miles1000s = miles / 1000,
    fatal1000s = fatal / 1000,
    popm = pop / 1e6
  )

var_dict <- c(
  unemprate = "Unemployment rate",
  beertax = "Beer tax",
  income1000s = "Income (1000s)",
  miles1000s = "Miles (1000s)",
  fatal1000s = "Fatalities (1000s)",
  popm = "Population (millions)"
)
```

## Descriptive statistics

We're going to make a two-panel descriptive statistics table. The first panel will summarize the variable distributions, and the second will count the total and unique observations by group.

### Summarize variable distributions

Now we can summarize the variable distributions, the standard approach for a summary statistics table in a paper. `modelsummary::datasummary` does most of the legwork here for us. 

```{r summarize-variable-distributions}
variable_distributions <- datasummary(All(data) ~ Mean + SD + Min + Median + Max,
  fmt = fmt_significant(2),
  output = "data.frame",
  data = data
)

# Use the data dictionary to rename variables
variable_distributions <- variable_distributions %>% 
  mutate(` ` = var_dict[as.character(` `)])

variable_distributions
```


### Count total and unique observations by group

I also like to count the total observations and unique observations by group (often different sets of fixed effects) in the same table. 

```{r count-obs}
# Count total observations and unique observations by group
counts <- tribble(
  ~Name, ~Value,
  "Observations", sprintf("%g", nrow(data)),
  "States", sprintf("%g", n_distinct(data$state)),
  "Years", sprintf("%g", n_distinct(data$year))
)
counts
```

### Turn into LaTeX

Now we can combine the two tables and save them as `.tex` files. This requires a tiny bit of hacking to jam the tables together. Note that save the output using the `output = "latex_tabular"` option to get only the tabular environment. This is useful because it lets me set captions and tables notes in the LaTeX document itself.

```{r summary-stats-latex}
# To combine, align first names
names(counts)[1:ncol(counts)] <- names(variable_distributions)[1:ncol(counts)]

summary_stats <- bind_rows(variable_distributions, counts)

# Replace NAs with empty strings
summary_stats[is.na(summary_stats)] <- " "

datasummary_df(
  summary_stats,
  output = "latex_tabular"
) %>%
  group_rows("Variables", start_row = 1, end_row = nrow(variable_distributions), bold = F, italic = T) %>%
  group_rows("Counts", start_row = nrow(variable_distributions) + 1, end_row = nrow(summary_stats), bold = F, italic = T) %>%
  write_lines("summary-stats.tex")
```

## Regression estimates

I'm a big fan of `fixest` for estimating regressions. It is extremely fast for models with lots of observations and fixed effects, and it includes a very nice set of functions for summarizing regression output. First we'll estimate the models, then we'll make the table.

### Estimate regression models

My tables often use similar sets of control variables with different sets of fixed effects. Content note: this is a regression annual automobile fatalities on a few variables, including the unemployment rate, income, beer taxes, and miles driven. The causal inference economist in me is required to disclose that I don't think we're estimating true causal effects here, but it's a nice example for a table. I use use `etable` at the end of this chunk for a quick view of the estimates.

```{r estimate-models}

fmla <- "fatal1000s ~ unemprate + income1000s + beertax + miles1000s"

models <- list()
models[["OLS"]] <- feols(as.formula(fmla), data = data)
models[["+ State FE"]] <- feols(as.formula(sprintf("%s | state", fmla)), data = data)
models[["+ Year FE"]] <- feols(as.formula(sprintf("%s | state + year", fmla)), data = data)

etable(models, cluster = ~state)
```

### Turn into LaTeX

But `etable` is capable of much more. Below I set options appropriate for LaTeX output.

```{r regression-etable}
setFixest_dict(var_dict)

etable(models,
  cluster = ~state,
  drop = "Constant",
  digits = "r3",
  digits.stats = 2,
  fitstat = c("n", "r2"),
  style.tex = style.tex("aer",
    fixef.suffix = " FEs",
    fixef.where = "var",
    yesNo = c("Yes", "No")
  ),
  tex = T
) %>%
  write_lines("regression-etable.tex")
```

## LaTeX document

That's basically it. The last step is to plonk these into a LaTeX document (the output of which you saw above), copied below. It's fairly simple, but I do use the `threeparttable` package to add notes to the tables.

```latex
\documentclass{article}
\usepackage{booktabs} 
\usepackage{caption}
\usepackage[para]{threeparttable}
\usepackage{siunitx}

\begin{document}

\begin{table}
\centering
\begin{threeparttable}
\caption{Summary statistics}
\input{summary-stats}
\begin{tablenotes}
 \item \emph{Notes}: Table notes here.
\end{tablenotes}
\end{threeparttable}
\end{table}

\begin{table}
\centering
\begin{threeparttable}
\caption{Regression estimates}
\input{regression-etable}
\begin{tablenotes}
 \item \emph{Notes}: Table notes here.
\end{tablenotes}
\end{threeparttable}
\end{table}

\end{document}
```
