{
  "hash": "72940333d455c59843a9177b6bca7df0",
  "result": {
    "markdown": "---\nlayout: post\ntitle: \"Generating regression tables in R\"\ndate: 2019-11-25\noutput:\n    bookdown::pdf_document2:\n        citation_package: biblatex\n        latex_engine: xelatex\n        keep_tex: true\n---\n\n\nI often need to document the statistical results I [estimate](/posts/2019-06-11-making-regressions-purrr/) in table format. I have tried many, many things over the years, and none of my solutions are perfect, including the one I'm about to describe. But, it is now... pretty good. \n\nFirst, I define a function that takes a list of fitted models (`models`) and some other variables and outputs a list of pieces that I can create a table with. See below for the function definition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stargazer)\n\n#' @param models A list of fitted models that stargazer can process\n#' @param keep Length 1 character vector of variables to display in table\n#' @param covariate.labels Labels for keep\n#' @param digits Number of digits to use for numbers in the table\n#'\n#' @return List of pieces of a tabular with named items header, inner, and footer\nmake_tex_pieces <- function(models, keep, covariate.labels, digits = 2) {\n  # models: a \n  # Use stargazer, but keep as little extra stuff as possible\n  tex_raw <- stargazer(models, \n                       keep = keep, covariate.labels = covariate.labels, \n                       digits = digits, \n                       table.layout = \"t\", no.space = T, align = T)\n  \n  # Split up into header, footer, and inner\n  idx0 <- grep(\"begin{tabular}\", tex_raw, fixed = T) # Start of \\begin{tabular}\n  idx1 <- grep(\"end{tabular}\", tex_raw, fixed = T) # End of \\begin{tabular}\n  \n  tex_header <- c(tex_raw[idx0], \"\\\\toprule\")\n  tex_footer <- c(\"\\\\bottomrule\", tex_raw[idx1])\n  \n  # Remove [-1.8ex] and get the inside of the tabular\n  tex_inner <- gsub(\"\\\\\\\\[-[\\\\.0-9]+ex]\", \"\", tex_raw[(idx0+1):(idx1-1)])\n  \n  # Return these as a 3 element list so that the user can insert header rows (column labels)\n  # and footer rows (summary statistics, fixed effects)\n  list(header = tex_header, inner = tex_inner, footer = tex_footer)\n}\n```\n:::\n\n\nOnce I have that function defined, I can use it to create the inside part of the table: the `tabular` command. \n\n\n\n```{.r .cell-code}\n# Load a sample dataset and run regression\ndata(cars)\nfit <- lm(speed ~ dist, data = cars)\n\n# Use the function we defined above to split the regression output into different pieces of a tabulr\npieces <- make_tex_pieces(fit, \"dist\", \"distance\")\n```\n\n\n% Table created by stargazer v.5.2.3 by Marek Hlavac, Social Policy Institute. E-mail: marek.hlavac at gmail.com\n% Date and time: Sat, Dec 10, 2022 - 23:36:33\n% Requires LaTeX packages: dcolumn \n\\begin{table}[!htbp] \\centering \n  \\caption{} \n  \\label{} \n\\begin{tabular}{@{\\extracolsep{5pt}}lD{.}{.}{-2} } \n\\\\[-1.8ex] distance & 0.17^{***} \\\\ \n  & (0.02) \\\\ \n \\end{tabular} \n\\end{table} \n\n```{.r .cell-code}\n# Put the pieces back together, adding a short panel with the count of observations\nlatex_output <- c(pieces$header,\n                  pieces$inner,\n                  \"\\\\midrule\",\n                  sprintf(\"Observations & %.0f \\\\\\\\\", length(fit$model$dist)),\n                  pieces$footer)\n\n# Write to file (I leave commented)\n# write(latex_output, \"model-tabular.tex\") \nlatex_output\n```\n\n[1] \"\\\\begin{tabular}{@{\\\\extracolsep{5pt}}lD{.}{.}{-2} } \"\n[2] \"\\\\toprule\"                                            \n[3] \" distance & 0.17^{***} \\\\\\\\ \"                         \n[4] \"  & (0.02) \\\\\\\\ \"                                     \n[5] \"\\\\midrule\"                                            \n[6] \"Observations & 50 \\\\\\\\\"                               \n[7] \"\\\\bottomrule\"                                         \n[8] \" \\\\end{tabular} \"                                     \n\n\nNext, I use the LaTeX `threeparttable` package (also used in this [post](/posts/2018-10-11-beamer-resizing/)) to display the table. Here's a minimum example. \n\n```\n\\documentclass{article}\n\n\\usepackage{booktabs} % Nice-looking tables\n\\usepackage{dcolumn} % Booktabs column spacing\n\\usepackage{threeparttable} % Align column caption, table, and notes\n\n% Flexible notes environment based on minipage\n\\newenvironment{notes}[1][Notes]{\\begin{minipage}[t]{\\linewidth}\\normalsize{\\itshape#1: }}{\\end{minipage}}\n\n\\begin{document}\n\n\\begin{table}\n  \\centering\n  \\begin{threeparttable}\n  \\caption{My table}\n  \\input{model-tabular.tex}\n    \\begin{notes}\n    * p $<$ 0.1, ** p $<$ 0.05, *** p $<$ 0.01. This regression is not confounded at all.\n    \\end{notes}\n  \\end{threeparttable}\n\\end{table}\n\n\\end{document}\n```\n\nAnd here's the result. \n\n![Table output](/img/auto-table-output.png)\n\n\nOther packages you might find useful:\n\n- [huxtable](https://hughjonesd.github.io/huxtable/) is a good solution for generating _quick_ regression tables for export to Markdown or HTML. I find its LaTeX output functions fairly cumbersome.\n- [kable/kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) are great for general purpose table creation, but can't easily process fitted model output.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}