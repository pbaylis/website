{
  "hash": "280ccf63ac9af89b10216dc68b19b209",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Making LaTeX tables that look nice (2024 update)\"\ndescription: \"\"\nauthor: \"Patrick Baylis\"\ndate: 2024-04-06\nformat: \n  html:\n    page-layout: full\ncategories:\n  - R\n  - latex\n---\n\n\nI haven't been very good at updating the blog recently,^[An understatement. I've been very bad at updating it.] but it feels like as good a time as any for an update on how to make basic but nice-looking LaTeX tables with relatively little coding effort. This post is an update to this [post from 2021](/posts/2021-05-30-making-tables/2021-05-30-making-tables.qmd), which was itself an update to a [post from 2019](/posts/2019-11-25-r-reg-tables/2019-11-25-r-reg-tables.qmd). I'll leave the discussion of philosophies around table-making to the 2021 post and get right to the good stuff: we're going to make these two tables.\n\n![](summary-preview.png){width=49%} ![](reg-preview.png){width=49%}\n\nIf you don't like the way those look, now is a good time to bail.\n\n## Setup\n\n### Load stuff\n\nFirst, we gotta load some stuff. I'm going to use [`pacman`](https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html) for package management, the [`tidyverse`](https://www.tidyverse.org/) for general data manipulation, `AER` for some data on automobile fatatalies, [`modelsummary`](https://modelsummary.com/) for summary statistics, [`kableExtra`](https://bookdown.org/yihui/rmarkdown-cookbook/kableextra.html) for some extra table formatting, and the inimitable [`fixest`](https://lrberge.github.io/fixest/) for estimating regressions and making the regression tables. \n\n::: {.callout-note}\nWe owe these package authors a huge thank-you for making our lives easier. **If you use them, don't forget to cite them in your papers and buy them a beverage of their choice when you meet them in person!** \n\n(Mea culpa: I have not done a good job citing the many packages I use in my own work. I will do better.)\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, AER, modelsummary, kableExtra, fixest)\n\ndata(\"Fatalities\")\n```\n:::\n\n\n\n\n### Rescale and relabel variables\n\nNext we need to do some cleaning up. I find it's useful to have my variables on similar scales for regressions and I want to make sure I'm describing those variables accurately, so before I do anythign I rescale and rename variable appropriately. This is also a good time to define a data dictionary here to clean up names in tables later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Rescale and label variables\ndata <- Fatalities %>%\n  transmute(state, year, \n    unemprate = unemp,\n    beertax = beertax * 100,\n    income1000s = income / 1000,\n    miles1000s = miles / 1000,\n    fatal1000s = fatal / 1000,\n    popm = pop / 1e6\n  )\n\nvar_dict <- c(\n  unemprate = \"Unemployment rate\",\n  beertax = \"Beer tax\",\n  income1000s = \"Income (1000s)\",\n  miles1000s = \"Miles (1000s)\",\n  fatal1000s = \"Fatalities (1000s)\",\n  popm = \"Population (millions)\"\n)\n```\n:::\n\n\n## Descriptive statistics\n\nWe're going to make a two-panel descriptive statistics table. The first panel will summarize the variable distributions, and the second will count the total and unique observations by group.\n\n### Summarize variable distributions\n\nNow we can summarize the variable distributions, the standard approach for a summary statistics table in a paper. `modelsummary::datasummary` does most of the legwork here for us. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_distributions <- datasummary(All(data) ~ Mean + SD + Min + Median + Max,\n  fmt = fmt_significant(2),\n  output = \"data.frame\",\n  data = data\n)\n\n# Use the data dictionary to rename variables\nvariable_distributions <- variable_distributions %>% \n  mutate(` ` = var_dict[as.character(` `)])\n\nvariable_distributions\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        Mean   SD   Min Median Max\n1     Unemployment rate  7.3  2.5   2.4      7  18\n2              Beer tax   51   48   4.3     35 272\n3        Income (1000s)   14  2.3   9.5     14  22\n4         Miles (1000s)  7.9  1.5   4.6    7.8  26\n5    Fatalities (1000s) 0.93 0.93 0.079    0.7 5.5\n6 Population (millions)  4.9  5.1  0.48    3.3  28\n```\n\n\n:::\n:::\n\n\n\n### Count total and unique observations by group\n\nI also like to count the total observations and unique observations by group (often different sets of fixed effects) in the same table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count total observations and unique observations by group\ncounts <- tribble(\n  ~Name, ~Value,\n  \"Observations\", sprintf(\"%g\", nrow(data)),\n  \"States\", sprintf(\"%g\", n_distinct(data$state)),\n  \"Years\", sprintf(\"%g\", n_distinct(data$year))\n)\ncounts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  Name         Value\n  <chr>        <chr>\n1 Observations 336  \n2 States       48   \n3 Years        7    \n```\n\n\n:::\n:::\n\n\n### Turn into LaTeX\n\nNow we can combine the two tables and save them as `.tex` files. This requires a tiny bit of hacking to jam the tables together. Note that save the output using the `output = \"latex_tabular\"` option to get only the tabular environment. This is useful because it lets me set captions and tables notes in the LaTeX document itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To combine, align first names\nnames(counts)[1:ncol(counts)] <- names(variable_distributions)[1:ncol(counts)]\n\nsummary_stats <- bind_rows(variable_distributions, counts)\n\n# Replace NAs with empty strings\nsummary_stats[is.na(summary_stats)] <- \" \"\n\ndatasummary_df(\n  summary_stats,\n  output = \"latex_tabular\"\n) %>%\n  group_rows(\"Variables\", start_row = 1, end_row = nrow(variable_distributions), bold = F, italic = T) %>%\n  group_rows(\"Counts\", start_row = nrow(variable_distributions) + 1, end_row = nrow(summary_stats), bold = F, italic = T) %>%\n  write_lines(\"summary-stats.tex\")\n```\n:::\n\n\n## Regression estimates\n\nI'm a big fan of `fixest` for estimating regressions. It is extremely fast for models with lots of observations and fixed effects, and it includes a very nice set of functions for summarizing regression output. First we'll estimate the models, then we'll make the table.\n\n### Estimate regression models\n\nMy tables often use similar sets of control variables with different sets of fixed effects. Content note: this is a regression annual automobile fatalities on a few variables, including the unemployment rate, income, beer taxes, and miles driven. The causal inference economist in me is required to disclose that I don't think we're estimating true causal effects here, but it's a nice example for a table. I use use `etable` at the end of this chunk for a quick view of the estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfmla <- \"fatal1000s ~ unemprate + income1000s + beertax + miles1000s\"\n\nmodels <- list()\nmodels[[\"OLS\"]] <- feols(as.formula(fmla), data = data)\nmodels[[\"+ State FE\"]] <- feols(as.formula(sprintf(\"%s | state\", fmla)), data = data)\nmodels[[\"+ Year FE\"]] <- feols(as.formula(sprintf(\"%s | state + year\", fmla)), data = data)\n\netable(models, cluster = ~state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              OLS         + State FE          + Year FE\nDependent Var.:        fatal1000s         fatal1000s         fatal1000s\n                                                                       \nConstant          -3.401* (1.649)                                      \nunemprate       0.1371** (0.0483) -0.0179** (0.0066) -0.0322** (0.0105)\nincome1000s      0.2250* (0.0870)    0.0200 (0.0140)   0.0365. (0.0186)\nbeertax         0.0048** (0.0016)  -0.0025* (0.0012)  -0.0028. (0.0015)\nmiles1000s       -0.0060 (0.0507)   -0.0021 (0.0037)    0.0016 (0.0032)\nFixed-Effects:  ----------------- ------------------ ------------------\nstate                          No                Yes                Yes\nyear                           No                 No                Yes\n_______________ _________________ __________________ __________________\nS.E.: Clustered         by: state          by: state          by: state\nObservations                  336                336                336\nR2                        0.17631            0.99245            0.99326\nWithin R2                      --            0.26298            0.25553\n---\nSignif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n### Turn into LaTeX\n\nBut `etable` is capable of much more. Below I set options appropriate for LaTeX output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetFixest_dict(var_dict)\n\netable(models,\n  cluster = ~state,\n  drop = \"Constant\",\n  digits = \"r3\",\n  digits.stats = 2,\n  fitstat = c(\"n\", \"r2\"),\n  style.tex = style.tex(\"aer\",\n    fixef.suffix = \" FEs\",\n    fixef.where = \"var\",\n    yesNo = c(\"Yes\", \"No\")\n  ),\n  tex = T\n) %>%\n  write_lines(\"regression-etable.tex\")\n```\n:::\n\n\n## LaTeX document\n\nThat's basically it. The last step is to plonk these into a LaTeX document (the output of which you saw above), copied below. It's fairly simple, but I do use the `threeparttable` package to add notes to the tables.\n\n```latex\n\\documentclass{article}\n\\usepackage{booktabs} \n\\usepackage{caption}\n\\usepackage[para]{threeparttable}\n\\usepackage{siunitx}\n\n\\begin{document}\n\n\\begin{table}\n\\centering\n\\begin{threeparttable}\n\\caption{Summary statistics}\n\\input{summary-stats}\n\\begin{tablenotes}\n \\item \\emph{Notes}: Table notes here.\n\\end{tablenotes}\n\\end{threeparttable}\n\\end{table}\n\n\\begin{table}\n\\centering\n\\begin{threeparttable}\n\\caption{Regression estimates}\n\\input{regression-etable}\n\\begin{tablenotes}\n \\item \\emph{Notes}: Table notes here.\n\\end{tablenotes}\n\\end{threeparttable}\n\\end{table}\n\n\\end{document}\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}