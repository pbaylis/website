{
  "hash": "a99c46b9b696caff89e69efc324e3716",
  "result": {
    "markdown": "---\ntitle: \"Linear combinations of coefficients in R\"\nlayout: post\ndate: '2018-04-12'\ncategories: coding\ntags:\n- r\n- prediction\n---\n\n\n::: {.callout-note}\nI still use a version of this occasionally, but the various marginal effects package -- specifically `marignaleffects' seem to replicate most of the functionality I need these days.\n:::\n\nOne of the few features I miss from Stata is the very-intuitive `lincom` command. Most of the time I recreate that functionality with `survey::svycontrast`. But, I always forget the syntax. This code demonstrates a minimal working example. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survey)\n\nN <- 100\ndf <- data.frame(x1 = rnorm(N), x2 = rnorm(N))\ndf$y <- 1 + 3 * df$x1 - 2 * df$x2 + rnorm(N, 0, 0.5)\n\nfit <- lm(y ~ x1 + x2, data = df)\n```\n:::\n\n\nHaving fit the model, we can pass unnamed vector with the right number of coefficients to get our desired linear combination:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvycontrast(fit, c(0, 1, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         contrast     SE\ncontrast  0.88835 0.0639\n```\n:::\n:::\n\n\nOr a named vector with any number of coefficients (as long as the names match). Or a list of named vectors. One \"gotcha\" to keep in mind: I have found that the latter syntax fails for some versions of `survey` and may be OS-dependent. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvycontrast(fit, list(c(\"x2\" = 1, \"x1\" = 1), c(\"x2\" = 4, \"x1\" = 2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     contrast     SE\n[1,]  0.88835 0.0639\n[2,] -2.32800 0.2075\n```\n:::\n:::\n\n\nIf you want an easy way to pass `svycontrast` a `data.frame` of where each row is a different linear combination (and each column a different variable), below is how you do that. This is usually if you want to produce similar behavior to, say, running `predict` on a fitted model but A) the predict call for that model doesn't return standard errors (as with `felm` or `fixest`) and/or B) you only want to linearly combine *some* of the variables (equivalent to setting all other coefficients = 0). In either case, this will work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvycontrast_df <- function(fit, newdata) {\n  # Call surveyconstrast with a data frame \n  df <- newdata\n  \n  # Transform data.frame into a list of its row vectors\n  df_list <- as.list(as.data.frame(t(newdata))) \n  df_list <- lapply(df_list, setNames, colnames(df)) # Set all character vector names inside list\n  \n  # Return a named list\n  setNames(as.list(as.data.frame(svycontrast(fit, df_list))), c(\"est\", \"se\"))\n}\n\nnewdata <- data.frame(x1 = seq(-3, 3, 1))\nnewdata$x2 <- newdata$x^2\nsvycontrast_df(fit, newdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$est\n[1] -27.2932457 -14.0907987  -4.9930501   0.0000000   0.8883517  -2.3279951\n[7]  -9.6490403\n\n$se\n[1] 0.44004435 0.20524188 0.06296086 0.00000000 0.06389291 0.20753339 0.44365681\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}